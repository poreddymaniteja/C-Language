Identify Keywords, Identifiers, and constants for the attached sample.c program


int Change_Value = 0;                          //int is a keyword , Change_Value is an identifier , 0 is a constant//
     int Sum_it (int, int);                    //int is a keyword , Sum_it is an identifier//
     void error_with_code (void);              //void is a keyword, error_with_code is an identifier//
     int main (void)                           //int and void is a keyword//
     {
        int Arg_1 = 20, Arg_2 = 40;            //int is a keyword , Arg_1 and Arg_2 are identifiers , 20&40 are constants//
        int i;                                 //int is keyword , i is an identifier//
         for (i = 0; i < 10;i++)               //for is a keyword , i is an identifier , 0 & 10 are constants//
         {
            if (Arg_1 > Arg_2)                  //if is a keyword , Arg_1 & Arg_2 are identifiers//
                 Arg_2 = Sum_it (Arg_1, Arg_2); //Arg_2 & Sum_it is an identifier//
            else                                //else is a keyword//
                Arg_1 = Sum_it (Arg_1, Arg_2);  //Arg_1 , Arg_2 & Sum_it is an identifier//
         }      
         error_with_code ();//
     }   /* End of main() */
     
     int Sum_it (int a, int b)                  //int is a keyword , Sum_it ,a & b are identifiers//
     {
         return a+b;                            //return is an keyword , a &b is an identifier//
     } /* End of Sum_it */
     
     void error_with_code(void)                 //void is a keyword//
     {
        int divide_value;                       //int is keyword , divide_value is an identifier//
        int result;                             //int is a keyword , result is an identifier//
        divide_value = Change_Value;            //divide_value & Change_Value are identifiers//
        result = 10 / divide_value;             //result is an identifier , 10 is a constant//
        return ;                                //return is a keyword//
     
     } /* End of error_with_code() */
